INTRODUCTION
============

ET: Legacy is an open source project based on the code of Wolfenstein: Enemy Territory, which was released in 2010 under
the terms of General Public License v3.

Set during World War II and heavily focused on team work, the game was initially released in 2003 by Splash Damage and
id Software. More than a decade after its release, after spending countless hours of escorting tanks and trucks,
stealing gold and radar parts and transmitting confidential documents, it was time to dust off the game which
consistently refused to go down.

Ambition
----------------------------------------------------------------------------
There are two aspects to this project: an updated game version "Enemy Territory: Legacy" and a new mod "legacy".

* The main goal of ET: Legacy is to fix bugs and security exploits, remove old dependencies, add useful features and
  modernize its graphics while still remaining compatible with ET 2.60b and as many of its mods as possible.
* The main goal of legacy is to stay close to the original gameplay experience and provide a viable alternative to ETPro
  for competitive play while staying lightweight but extensible through additional Lua scripts.

Community
----------------------------------------------------------------------------
Under the wing of ET: Legacy, players from all corners of the Wolfenstein: Enemy Territory community came together to
continuously update a game that is well over a decade old, which despite its considerable age is still home to hundreds
of concurrent players a day. ET: Legacy development is a collaborative effort done in an open, transparent and friendly
manner. We do appreciate any contribution to the project may it be in the form of patches, suggestions, reports or
comments.

Anyone is welcome to join our efforts!


GENERAL NOTES
=============

Game data
-----------------------------------------------------------------------------

This package release contains only the engine and mod code but not any game data, which is still
covered by the original EULA and must be obeyed as usual. The ET: Legacy installer have downloaded
them for you automatically.

In case you have not used the installer, you can download the free Wolfenstein: Enemy Territory
release from Splash Damage at http://www.splashdamage.com/content/download-wolfenstein-enemy-territory.

In order to run ET: Legacy you will need to copy the original assets files
(*pak0.pk3*, *pak1.pk3* and *pak2.pk3*) to the etmain folder.


Compatibility with Enemy Territory 2.60b
----------------------------------------------------------------------------

ET: Legacy remains compatible with the ET 2.60b version as much as possible.

Please note that ET: Legacy is *not* compatible with PunkBuster enabled servers. ET: Legacy clients
also cannot connect to servers running the ETPro mod.

See http://dev.etlegacy.com/projects/etlegacy/wiki/Compatible_Mods for more information.


Linux 64 bit
------------

Please remember that Linux 64 bit ET: Legacy clients can only connect to servers running mods
providing a 64 bit version. You will be able to play 32 bit-only mods only if you install the
Linux 32 bit version.

At the moment, only the Legacy mod is available in 64 bit version, while all other existing mods
are available in 32 bit only version.


INSTALLATION
============

Installation Guides are provided at http://dev.etlegacy.com/projects/etlegacy/wiki/Installation

To run a server, please refer to http://dev.etlegacy.com/projects/etlegacy/wiki/Features


LUA SCRIPTS
===========

A collection of Lua scripts to extend the Legacy mod can be found at https://github.com/etlegacy/etlegacy-lua_scripts

The Lua API documentation can be found at https://legacy-lua-api.readthedocs.io


FREQUENTLY ASKED QUESTIONS
==========================

See our FAQ at http://dev.etlegacy.com/projects/etlegacy/wiki/FAQ


WEBSITE
=======

For more information consult our website at http://www.etlegacy.com/.

RASPBERRY PI INSTALLATION
=========================

ET: Legacy supports both OpenGL and OpenGL ES on the Raspberry Pi.

Using the Raspbian Operating System, both OpenGL and GLES run the game providing good performance at low-mid settings, typically between 20-60 FPS.

Using Ubuntu MATE, neither OpenGL or GLES work currently - tested with Ubuntu MATE 18.04 beta 1.

It is advised to add a slight overclock to the GPU to provide a better experience. Run `sudo nano /boot/config.txt` and
add the following to the config file:

```
core_freq=500
v3d_freq=500
```

You may be able to increase the overclock more than this, but increasing too far will be unstable and will likely crash
your Pi. If you experience crashes whilst having the overclock in place, decrease the values accordingly.

Install using experimental OpenGL driver:

1.  Enable experimental OpenGL driver via the `raspi-config` command line application.
2.  Modify `easybuild.sh` and set the `FEATURE_RENDERER_GLES` flag to 0 under the `RPI` section.
3.  If building SDL from source, ensure you have passed `--host=armv7l-raspberry-linux-gnueabihf` when calling the
    configure command. Otherwise, keep `BUNDLED_SDL=1` in `easybuild.sh`.
4.  Increase GPU memory split to at least 256mb.
5.  Run `./easybuild.sh -RPI -j4` to build for Raspberry Pi.
6.  Start the game in windowed mode. Full screen mode has issues currently.

Install using OpenGLES:

1.  Ensure the legacy OpenGL driver is enabled via the `raspi-config` command line application (it is by default).
2.  Modify `easybuild.sh` and set the `FEATURE_RENDERER_GLES` flag to 1 under the `RPI` section.
3.  If building SDL from source, ensure you have passed
    `--host=armv7l-raspberry-linux-gnueabihf --host=armv7l-raspberry-linux-gnueabihf --disable-pulseaudio
        --disable-esd --disable-video-mir --disable-video-wayland --disable-video-x11 --disable-video-opengl`
    when calling the configure command. This will ensure SDL is built with an OpenGL ES backend. Otherwise, keep `BUNDLED_SDL=1` in `easybuild.sh`.
    Note: The host flag is necessary for SDL to correctly recognise Raspberry Pi 2 and greater.
4.  Increase GPU memory split to at least 256mb.
5.  Run `./easybuild.sh -RPI -j4` to build for Raspberry Pi.
6.  Exit X11 to terminal in order to enable hardware accelerated rendering.